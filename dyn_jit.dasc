#include "jitter.h"
#include "dasm_driver.h"
#include "dasm_x86.h"
#include "cpu_intrinsics.h"
#include "io.h"
#include <stdio.h>
#include <stdbool.h>
#include <glib.h>
#include <sys/mman.h>
| .arch x64
|.globals glob_
|.actionlist actions
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro
|.include jit_macros.h
#define Dst &state
dasm_State *state;
int pclabel =0;
GHashTable* trace_cache;
processor_state proc_state;
uintptr_t proc_ptr = (uintptr_t)&proc_state;
extern uint16_t* main_memory;
extern bool trace_mode;
extern FILE *dump_file;
extern int dumpaddr_end;
bool count_instructions = true;
void cleanup_sound(void);

char* inst_names[128] = {"NOP","ADD","SUB","PUSH","POP","MOVB","MOVB","MOVB","MOVB","MOVB","MOVB","MOVB","MOVB","MOV","AND","OR","XOR","NOT","NEG","LD","ST","CMP","JMP","CALL","RET","SHL","SHR","ROL","RCL","LDCP","STCP","ADC","SBB","SET","TEST","PUSHLR","SAR",0};
int jit_instruction(uint16_t* inst);
void finish(){
    io_destroy();
    //cleanup_sound();
    for(int i=0;i<8;i++){
          printf("r%d: %04x\n",i,proc_state.regs[i]);
    }
    if(dump_file){
      fwrite(main_memory,1,dumpaddr_end,dump_file);
      fclose(dump_file);
	
    }
    printf("Instructions executed: %d\n", proc_state.instructions_executed);
    exit(0);
}
void init_jit(){
    trace_cache = g_hash_table_new_full(g_direct_hash,g_direct_equal,NULL,free_jitcode);
    inst_names[127] = "KILL";
    inst_names[126] = "FLUSH";
}
void print_flags(long long flags){ 
    //this method depends on the flag locations in the x86_64 RFLAGS register
    char flagstr[5] = "0000";
    if(flags&128) flagstr[0] = '1';//negative flag
    if(flags&64) flagstr[1] = '1';//zero flag
    if(flags&1) flagstr[2] = '1';//carry flag
    if(flags&2048) flagstr[3] = '1';//overflow flag
    fprintf(stderr, "%s ",flagstr);
}
void trace_instruction(uint8_t opcode, long long flags, int addr){
    fprintf(stderr,"%04x-", addr);
    fprintf(stderr,"%-4s: NZCV ",inst_names[opcode]);
    print_flags(flags);
    for(int i=0;i<8;i++){
        fprintf(stderr,"%04x ", proc_state.regs[i]);
    }
    fprintf(stderr,"\n");
}
void jit_trace(uint16_t* inst, int addr){
    if(trace_mode){
        uint8_t opcode = (*inst >>8) & 0x7f;
        |pushf
        |push r11
        |mov rdi, opcode 
        |pushf
        |pop rsi
	|mov rdx, addr
        |callp trace_instruction
        |pop r11
        |popf
    }
}
gboolean foreach_clear_table(void* u1,void* value,void* nodelete){
    return (jit_function*)value != (jit_function*)nodelete;
}
void flush(jit_function* func){
    fprintf(stderr,"Flushing trace cache\n");
    g_hash_table_foreach_remove(trace_cache,foreach_clear_table,func);
}
jit_function branch_to(uint16_t addr, uint8_t rewrite){
    //printf("branch to: %04x\n",addr);
    if(g_hash_table_contains(trace_cache,GINT_TO_POINTER(addr))){
        //printf("Taking cached branch\n");
        jit_function func = g_hash_table_lookup(trace_cache,GINT_TO_POINTER(addr));
	if(rewrite){
	    // Get address of caller
	    void* return_addr = __builtin_return_address(0);

	    // Get address of the movabs that generated the calling address
	    void* movabs_addr = return_addr-12;
	    // Get the address of the 64 bit data for the movabs
	    uint64_t* movabs_data = (uint64_t*)(movabs_addr+2);

	    uint16_t* call_addr = return_addr-2;

	    // Make the code writable
	    void* movabs_page = (void*)((uintptr_t)movabs_data & ~((1<<12)-1));
	    void* movabs_page2 = (void*)((uintptr_t)return_addr & ~((1<<12)-1));
	    int success = mprotect(movabs_page, sizeof(uint64_t), PROT_WRITE);
	    if(success < 0){
		perror("mprotect");
		exit(1);
	    }
	    if(movabs_page2 != movabs_page){
		success = mprotect(movabs_page2, sizeof(uint64_t), PROT_WRITE);
		if(success < 0){
		    perror("mprotect");
		    exit(1);
		}
	    }
	    // Rewrite the movabs to load the address of the JITed function
	    *movabs_data = func;
	    // Replace the call with a NOP so we don't overflow the stack
	    *call_addr = 0x9066; // 2 byte NOP

	    // Make the code executable
	    success = mprotect(movabs_page, sizeof(uint64_t), PROT_EXEC | PROT_READ);
	    if(success < 0){
		perror("mprotect");
		exit(1);
	    }
	    if(movabs_page2 != movabs_page){
		success = mprotect(movabs_page2, sizeof(uint64_t), PROT_EXEC | PROT_READ);
		if(success < 0){
		    perror("mprotect");
		    exit(1);
		}
	    }
	}
	return func;
    }
    initjit(&state,actions);
    //printf("Compiling a branch to %04x\n",addr);
    uint16_t* instructions = main_memory + (addr/2);
    uintptr_t mem_ptr = (uintptr_t) main_memory;
    |push rbp
    |mov rbp,rsp
    |push r12
    |push r13
    |push rbx
    |push r14
    |mov r14,rdi

    |mov64 r12,proc_ptr
    |mov64 r13, mem_ptr
    int bytes = 0;
    while((bytes = jit_instruction(instructions))!= -1){
        instructions += bytes;
    }
    |pop r14
    |pop rbx
    |pop r13
    |pop r12
    |mov  rsp, rbp
    |callp finish
    |pop rbp

    jit_function func = jitcode(&state);
    g_hash_table_insert(trace_cache,GINT_TO_POINTER(addr),func);

    return func;
}
void branch_test(uintptr_t ptr){
    printf("Supposed to branch here: %lu\n",ptr);
}
int jit_instruction(uint16_t* inst){
    uint16_t addr = inst-main_memory;
    uint8_t opcode = *inst >>8;
    uint8_t reg_sel = *inst & 0xff;
    uint8_t rD = reg_sel & 0x7;
    uint8_t rS = (reg_sel>>3) &0x7;
    uint8_t condition = (reg_sel>>3) & 0xF;
    uint16_t imm = *(inst+1);
    if(count_instructions){
        | push rax
        | mov eax, [r12+20]
        | lea eax, [eax+1]
        | mov [r12+20], eax
        | pop rax
    }
    jit_trace(inst, addr*2);
    switch(opcode){
        case ADD:
            |inst_rr add
            break;
        case SUB:
            |inst_rr sub
            break;
        case PUSH:
            |mov ax, [r12+(rD*2)]
            |movzx rdx, word [r12+((7-rS)*2)]
            |lea rdx,[rdx-2]
            |mov [r13+rdx], ax
            |mov [r12+((7-rS)*2)], dx
            break;
        case POP:
            |movzx rdx, word [r12+((7-rS)*2)]
            |mov ax,[r13+rdx]
            |mov [r12+(rD*2)],ax
            |lea rdx, [rdx+2]
            |mov [r12+((7-rS)*2)],dx
            break;
        case MOVB_R0:
        case MOVB_R1:
        case MOVB_R2:
        case MOVB_R3:
        case MOVB_R4:
        case MOVB_R5:
        case MOVB_R6:
        case MOVB_R7:
            |mov word [r12+((opcode-MOVB_R0)*2)], reg_sel
            break;
        case MOV:
            |inst_rr mov
            break;
        case AND:
            |inst_rr and
            break;
        case OR:
            |inst_rr or
            break;
        case XOR:
            |inst_rr xor
            break;
        case NOT:
            |not word [r12+(rD*2)]
            break;
        case NEG:
            |neg word [r12+(rD*2)]
            break;
        case LD:
            if(reg_sel & BYTE_FLAG){
                |movzx rdi, word [r12+(rS*2)]
                |cmp rdi, 0xff00
                |jge >1
                |movzx rax, byte [r13+rdi]
                |mov [r12+(rD*2)], ax
                |jmp >2
                |1:
                |callp io_load_byte
                |mov [r12+(rD*2)],ax
                |2:
            }else{
                |movzx rdi, word [r12+(rS*2)]
                |cmp rdi, 0xff00
                |jge >1
                |mov ax, [r13+rdi]
                |mov [r12+(rD*2)], ax
                |jmp >2
                |1:
                |callp io_load_word
                |mov [r12+(rD*2)],ax
                |2:
            }
            break;
        case ST:
            if(reg_sel & BYTE_FLAG){
                |movzx rdi, word [r12+(rS*2)]
                |movzx rsi, byte [r12+(rD*2)]
                |cmp rdi, 0xff00
                |jge >1
                |mov [r13+rdi],r6b //si (low byte)
                |jmp >2
                |1:
                |callp io_store_byte
                |2:
            }else{
                |movzx rdi, word [r12+(rS*2)]
                |movzx rsi, word [r12+(rD*2)]
                |cmp rdi, 0xff00
                |jge >1
                |mov [r13+rdi],si
                |jmp >2
                |1:

                |callp io_store_word
                |2:
            }
        case CMP:
            |mov ax, [r12+(rD*2)]
            |mov dx, [r12+(rS*2)]
            |cmp ax,dx
            break;
        case JMP:
            if(condition != AL){
                fprintf(stderr, "Conditional indirect jumps not supported yet!\n");
                exit(1);
            }
            |movzx rdi, word [r12+(rD*2)]
	    |mov rsi, 1
            |callp branch_to
            |mov rsp,rbp
            |pop rbp
            |mov rdi,rax
            |jmp rax
            return -1;
            break;
        case SPEC:
            |movzx rdi, word [r12+16]
	    |mov rsi, 1
            |callp branch_to
            |mov rsp,rbp
            |pop rbp
            |mov rdi,rax
            |jmp rax
            return -1;
        case SHL:
            |shift_rr shl
            break;
        case SHR:
            |shift_rr shr
            break;
        case ROL:
            |shift_rr rol
            break;
        case RCL:
            |shift_rr rcl
            break;
	    case LDCP:
			if(condition == 0){	/* FLAGS */
				| pushf
				| pop rdx
                | xor rax, rax
                | bt dx, 11  // overflow flag
                | rcl eax, 1
                | bt dx, 7   // sign flag
                | rcl eax, 1
                | bt dx, 0   // carry flag
                | rcl eax, 1
                | bt dx, 6 //zero flag
                | rcl eax, 1
                | mov word [r12+(rD*2)], ax
			}
            break;
	    case ADC:
            |inst_rr adc
            break;
        case SBB:
            |inst_rr sbb
            break;
        case SET:
            switch (condition) {
                case EQ:
                    |setcond sete
                    break;
                case NE:
                    |setcond setne
                    break;
                case OS:
                    |setcond seto
                    break;
                case OC:
                    |setcond setno
                    break;
                case HI:
                    |setcond seta
                    break;
                case LS:
                    |setcond setbe
                    break;
                case P:
                    |setcond setns
                    break;
                case N:
                    |setcond sets
                    break;
                case CS:
                    |setcond setc
                    break;
                case CC:
                    |setcond setnc
                    break;
                case GE:
                    |setcond setge
                    break;
                case G:
                    |setcond setg
                    break;
                case LE:
                    |setcond setle
                    break;
                case L:
                    |setcond setl
                    break;


            }


        case TEST:
            |inst_rr test
            break;

        case PUSHLR:
            |mov ax, [r12+16]
            |movzx rdx, word [r12+(((7-rS)*2))]
            |lea rdx,[rdx-2]
            |mov [r13+rdx], ax
            |mov [r12+((7-rS)*2)], dx
            break;
        case SAR:
            |shift_rr sar
            break;




        case ADDI:
            | inst_ri add
            break;
        case SUBI:
            |inst_ri sub
            break;
        case PUSHI:
            |movzx rdx, word [r12+((7-rS)*2)]
            |lea rdx,[rdx-2]
            |mov word [r13+rdx], imm
            |mov [r12+((7-rS)*2)], dx
            break;
        case MOVI:
            |inst_ri mov
            break;
        case ANDI:
            |inst_ri and
            break;
        case ORI:
            |inst_ri or
            break;
        case XORI:
            |inst_ri xor
            break;
        case LDI:
            if(reg_sel & DISP_FLAG){
                if(reg_sel & BYTE_FLAG){
                    |mov rdi, imm
                    |add di, word [r12+(rS*2)]
                    |cmp rdi, 0xff00
                    |jge >1
                    |movzx rax, byte [r13+rdi]
                    |mov [r12+(rD*2)], ax
                    |jmp >2
                    |1:
                    |callp io_load_byte
                    |mov [r12+(rD*2)], ax
                    |2:
                }else{
                    |mov rdi, imm
                    |add di, word [r12+(rS*2)]
                    |cmp rdi, 0xff00
                    |jge >1
                    |mov ax, [r13+rdi]
                    |mov [r12+(rD*2)], ax
                    |jmp >2
                    |1:
                    |callp io_load_word
                    |mov [r12+(rD*2)], ax
                    |2:
                }
            }else{
                if(reg_sel & BYTE_FLAG){
                    if(imm >=0xff00){
                        |mov rdi, imm
                        |callp io_load_byte
                        |mov [r12+(rD*2)],ax
                    }else{
                        |movzx rax, byte [r13+imm]
                        |mov [r12+(rD*2)],ax
                    }
                }else{
                    if(imm >=0xff00){
                        |mov rdi, imm
                        |callp io_load_word
                        |mov [r12+(rD*2)],ax
                    }else{
                        |mov ax, [r13+imm]
                        |mov [r12+(rD*2)],ax
                    }
                }
            }
            break;
        case STI:
            if(reg_sel & DISP_FLAG){
                if(reg_sel & BYTE_FLAG){
                    |mov rdi,imm
                    |add di, [r12+(rS*2)]
                    |movzx rsi, byte [r12+(rD*2)]
                    |cmp rdi, 0xff00
                    |jge >1
                    |mov [r13+rdi], r6b
                    |jmp >2
                    |1:
                    |callp io_store_byte
                    |2:
                }
                else{
                    |mov rdi,imm
                    |add di, [r12+(rS*2)]
                    |movzx rsi, word [r12+(rD*2)]
                    |cmp rdi, 0xff00
                    |jge >1
                    |mov [r13+rdi], si
                    |jmp >2
                    |1:
                    |callp io_store_word
                    |2:
                }
            }else{
                if(imm >= 0xff00){
                    if(reg_sel & BYTE_FLAG){
                        |mov rdi, imm
                        |mov r6b, [r12+(rD*2)] //si (low byte)
                        |callp io_store_byte
                    }else{
                        |mov rdi,imm
                        |mov si, [r12+(rD*2)]
                        |callp io_store_word
                    }
                }else{
                    if(reg_sel & BYTE_FLAG){
                        |mov al, [r12+(rD*2)]
                        |mov [r13+imm],ax
                    }else{
                        |mov ax, [r12+(rD*2)]
                        |mov [r13+imm],ax
                    }
                }
            }

            break;
        case CMPI:
            |mov ax, [r12+(rD*2)]
            |cmp ax, imm
            break;
        case JMPI:
            switch(condition){
                case AL:
                    |mov rdi, imm
		    |mov rsi, 1
                    |callp branch_to
                    |mov rsp,rbp
                    |pop rbp
                    |mov rdi,rax
                    |jmp rax
                    return -1;
                case EQ:
                    |cond_jmp jne
                    break;
                case NE:
                    |cond_jmp je
                    break;
                case OS:
                    |cond_jmp jno
                    break;
                case OC:
                    |cond_jmp jo
                    break;
                case HI:
                    |cond_jmp jbe
                    break;
                case LS:
                    |cond_jmp ja
                    break;
                case P:
                    |cond_jmp js
                    break;
                case N:
                    |cond_jmp jns
                    break;
                case CS:
                    |cond_jmp jnc
                    break;
                case CC:
                    |cond_jmp jc
                    break;
                case GE:
                    |cond_jmp jl
                    break;
                case G:
                    |cond_jmp jle
                    break;
                case LE:
                    |cond_jmp jg
                    break;
                case L:
                    |cond_jmp jge
                    break;
            }

            break;
        case CALLI:
            switch(condition){
                case AL:
                    |mov rdi, imm
                    |mov word [r12+16], (addr+2)*2
		    |mov rsi, 1
                    |callp branch_to
                    |mov rsp,rbp
                    |pop rbp
                    |mov rdi,rax
                    |jmp rax
                    break;
                default:
                    fprintf(stderr,"Conditional CALLs not supported yet.\n");
                    exit(1);

            }
            return -1;
            break;

        case SHLI:
            |inst_ri shl
            break;
        case SHRI:
            |inst_ri shr
            break;
        case ROLI:
            |inst_ri rol
            break;
        case RCLI:
            |inst_ri rcl
            break;
        case ADCI:
            |inst_ri adc
            break;
        case SBBI:
            |inst_ri sbb
            break;
        case TESTI:
            |inst_ri test
            break;
        case SARI:
            |inst_ri sar
            break;
        case 0xFE: //flush
            |mov rdi,r14
            |callp flush
            return 1;
        case 0xFF: return -1;
        default:

            break;

    }
    return (opcode & 0x80) ? 2 : 1;
}
